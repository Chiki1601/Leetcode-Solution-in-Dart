class Solution {
  int numberOfPairs(List<List<int>> points) {
    // Step 1: Sort points by x ascending, then by y descending
    points.sort((a, b) {
      if (a[0] == b[0]) return b[1].compareTo(a[1]);
      return a[0].compareTo(b[0]);
    });

    int pairCount = 0;
    int n = points.length;

    // Step 2: Iterate through all points as potential "upper-left" points
    for (int i = 0; i < n; i++) {
      int upperY = points[i][1];  // y-coordinate of upper-left point
      int lowerYLimit = -1 << 31; // Dart's equivalent of int.MinValue

      // Step 3: Check subsequent points as potential "bottom-right" points
      for (int j = i + 1; j < n; j++) {
        int currentY = points[j][1];

        // Valid pair if currentY is below upperY and above previous lowerYLimit
        if (currentY <= upperY && currentY > lowerYLimit) {
          pairCount++;
          lowerYLimit = currentY;

          // Once we reach the same y as upperY, no more valid points possible
          if (currentY == upperY) break;
        }
      }
    }

    return pairCount;
  }
}
